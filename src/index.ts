// src/index.ts

import { terminal } from "terminal-kit";
import WebSocket from "ws";

async function main() {
  terminal.clear();
  terminal.bold.blue("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DTrader Crypto CLI\n\n");

  const ws = new WebSocket("wss://api.gateio.ws/ws/v4/");

  ws.on("open", () => {
    terminal.green("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å Gate.io\n");
    const pingMsg = {
      id: 1,
      method: "server.ping",
      params: [],
    };
    terminal.yellow("‚û° –û—Ç–ø—Ä–∞–≤–∫–∞ ping...\n");
    ws.send(JSON.stringify(pingMsg));
  });

  ws.on("message", (raw) => {
    try {
      const msg = JSON.parse(raw.toString());
      if (msg.id === 1 && msg.result === "pong") {
        terminal.green("‚¨Ö –ü–æ–ª—É—á–µ–Ω pong –æ—Ç Gate.io\n");
      } else {
        terminal.cyan("‚Ñπ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg, "\n");
      }
    } catch (err: any) {
      terminal.red("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err.message, "\n");
    }
  });

  ws.on("error", (err) => {
    terminal.red("üö® WebSocket –æ—à–∏–±–∫–∞:", err.message, "\n");
  });

  ws.on("close", (code, reason) => {
    terminal.red(
      `üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (code=${code}, reason=${reason.toString()})\n`
    );
    process.exit(0);
  });
}

main().catch((err) => {
  terminal.red("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", err.message, "\n");
  process.exit(1);
});
